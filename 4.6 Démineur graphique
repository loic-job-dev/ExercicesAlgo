/* 4.4 Démineur en ligne - Parcours */
int[][] boardMine ;
int sizeBoard = 7;
int mineNumber = 8;

void setup () {
  size (500, 500);
  background(56, 4, 75);
  /*Initialisation du tableau */
  initBoard(sizeBoard, mineNumber);
  /*Placement des mines et des chiffres*/
  for (int sizeBoardX=0; sizeBoardX<sizeBoard; sizeBoardX++) {
    for (int sizeBoardY=0; sizeBoardY<sizeBoard; sizeBoardY++) {
      designGrid (sizeBoardX, sizeBoardY);  // Permet de dessiner le démineur
    }
  }
}

void draw (){

}

void mouseClicked() {
  float clickBoardX = mouseX;
  float clickBoardY = mouseY;
  showCase (clickBoardX, clickBoardY);
}

void initBoard (int sizeBoard, int mineNumber) {
  boardMine = new int [sizeBoard][sizeBoard];
  /* Dépose une mine */
  boardMine[int(random(sizeBoard))][int(random(sizeBoard-1))] = 99; 
  for (int i=0; i<mineNumber-1; i++) {
    int mineIndexX = int(random(sizeBoard));
    int mineIndexY = int(random(sizeBoard));
    /* Si la case est déjà minée, on reboucle */
    if (boardMine[mineIndexX][mineIndexY] == 99) {   
      mineNumber++;
    }
    /* Sinon, on pose une mine) */
    else {  
      boardMine[mineIndexX][mineIndexY] = 99;
    }
  }
}

boolean isAMine (int mineIndexX, int mineIndexY) {
  if (boardMine[mineIndexX][mineIndexY] == 99) {
    return true;
  }
  else {
    return false;
  }
}

int getMines (int mineIndexX, int mineIndexY) {
  int nearMines = 0;
          /* Pour tester les cases à gauche */
    if(mineIndexX > 0 && boardMine[mineIndexX-1][mineIndexY] == 99) {
      nearMines++;
    }
          /* Pour tester les cases en bas à gauche */
    if(mineIndexX > 0 && mineIndexY < boardMine.length-1 && boardMine[mineIndexX-1][mineIndexY+1] == 99) {
      nearMines++;
    }
              /* Pour tester les cases en bas */
    if(mineIndexY < boardMine.length-1 && boardMine[mineIndexX][mineIndexY+1] == 99) {
      nearMines++;
    }
                  /* Pour tester les cases en bas à droite */
    if(mineIndexX < boardMine.length-1 && mineIndexY < boardMine.length-1 && boardMine[mineIndexX+1][mineIndexY+1] == 99) {
      nearMines++;
    }
          /* Pour tester les cases à droite */
    if(mineIndexX < boardMine.length-1 && boardMine[mineIndexX+1][mineIndexY] == 99) {
      nearMines++;
    }
        /* Pour tester les cases en haut à droite */
    if(mineIndexX < boardMine.length-1 && mineIndexY > 0 && boardMine[mineIndexX+1][mineIndexY-1] == 99) {
      nearMines++;
    }
            /* Pour tester les cases en haut */
    if(mineIndexY > 0 && boardMine[mineIndexX][mineIndexY-1] == 99) {
      nearMines++;
    }
                /* Pour tester les cases en haut à gauche */
    if(mineIndexX > 0 && mineIndexY > 0 && boardMine[mineIndexX-1][mineIndexY-1] == 99) {
      nearMines++;
    }
  return nearMines;
}

void printBoard() {
  for (int i = 0; i < boardMine.length; i++) {
    for (int j = 0; j < boardMine[i].length; j++) {
      print(boardMine[i][j] + "\t");  /* \t pour tabulation (alignement)  */
    }
    println();  /* retour à la ligne après chaque ligne du tableau */
  }
}

/* Dessin de la grille */
void designGrid (int sizeBoardX, int sizeBoardY){
  fill(149, 250,149);
  rect (sizeBoardX*25+25, sizeBoardY*25+25, 24, 24);
  fill(120, 191, 252);
  textSize(20);
  text("Nombre de mines : " + mineNumber, 20, 20);
}

void showCase (float clickBoardX, float clickBoardY) {
  /* On convertit les coodonnées en entier pour retrouver l'index du tableau */
  int sizeBoardX = int(clickBoardY/25-1);
  int sizeBoardY = int(clickBoardX/25-1);
  println (clickBoardX + " "+ clickBoardY);  /* Affiche les coodonnées du click */
  println(sizeBoardX + " " + sizeBoardY);   /* Affiche les coodonnées de la case = l'index du tableau */
  println(boardMine [sizeBoardX][sizeBoardY]);  
  if (boardMine [sizeBoardX][sizeBoardY] == 99) {
    fill(72, 3, 12);
    stroke(240, 2, 30);
    rect (sizeBoardY*25+25, sizeBoardX*25+25, 24, 24);
    fill(245, 10, 41);
    textSize(18);
    text("X", (sizeBoardY+1.3)*25, (sizeBoardX+1.7)*25);
    println("PERDU");
  }
  else {
    fill(5, 245, 171);
    rect (sizeBoardY*25+25, sizeBoardX*25+25, 24, 24);
    fill(5, 5, 5);
    textSize(18);
    text(getMines (sizeBoardX, sizeBoardY), (sizeBoardY+1.3)*25, (sizeBoardX+1.7)*25);
  }
}
