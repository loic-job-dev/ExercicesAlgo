public class TriAlgorithms {

    // ---------------------------
    // Tri par sélection (Selection Sort)
    // ---------------------------
    public static void selectionSort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < array.length; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
            }
            // Échange
            int temp = array[minIndex];
            array[minIndex] = array[i];
            array[i] = temp;
        }
    }

    // ---------------------------
    // Tri par insertion (Insertion Sort)
    // ---------------------------
    public static void insertionSort(int[] array) {
        for (int i = 1; i < array.length; i++) {
            int key = array[i];
            int j = i - 1;

            while (j >= 0 && array[j] > key) {
                array[j + 1] = array[j];
                j--;
            }
            array[j + 1] = key;
        }
    }

    // ---------------------------
    // Tri à bulles (Bubble Sort)
    // ---------------------------
    public static void bubbleSort(int[] array) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 1; i < array.length; i++) {
                if (array[i - 1] > array[i]) {
                    int temp = array[i];
                    array[i] = array[i - 1];
                    array[i - 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }

    // ---------------------------
    // Tri rapide (Quick Sort)
    // ---------------------------
    public static void quickSort(int[] array, int low, int high) {
        if (low < high) {
            int pi = partition(array, low, high);
            quickSort(array, low, pi - 1);
            quickSort(array, pi + 1, high);
        }
    }

    private static int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (array[j] <= pivot) {
                i++;
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }

        int temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;

        return i + 1;
    }

    // ---------------------------
    // Tri fusion (Merge Sort)
    // ---------------------------
    public static void mergeSort(int[] array) {
        if (array.length > 1) {
            int mid = array.length / 2;

            int[] left = new int[mid];
            int[] right = new int[array.length - mid];

            System.arraycopy(array, 0, left, 0, mid);
            System.arraycopy(array, mid, right, 0, array.length - mid);

            mergeSort(left);
            mergeSort(right);

            merge(array, left, right);
        }
    }

    private static void merge(int[] array, int[] left, int[] right) {
        int i = 0, j = 0, k = 0;

        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                array[k++] = left[i++];
            } else {
                array[k++] = right[j++];
            }
        }

        while (i < left.length) {
            array[k++] = left[i++];
        }

        while (j < right.length) {
            array[k++] = right[j++];
        }
    }

    // ---------------------------
    // Méthode de test principale
    // ---------------------------
    public static void main(String[] args) {
        int[] original = {64, 25, 12, 22, 11};

        // Test avec une copie pour chaque tri
        int[] array1 = original.clone();
        selectionSort(array1);
        System.out.println("Selection Sort: ");
        printArray(array1);

        int[] array2 = original.clone();
        insertionSort(array2);
        System.out.println("Insertion Sort: ");
        printArray(array2);

        int[] array3 = original.clone();
        bubbleSort(array3);
        System.out.println("Bubble Sort: ");
        printArray(array3);

        int[] array4 = original.clone();
        quickSort(array4, 0, array4.length - 1);
        System.out.println("Quick Sort: ");
        printArray(array4);

        int[] array5 = original.clone();
        mergeSort(array5);
        System.out.println("Merge Sort: ");
        printArray(array5);
    }

    // ---------------------------
    // Méthode utilitaire pour afficher un tableau
    // ---------------------------
    public static void printArray(int[] array) {
        for (int val : array) {
            System.out.print(val + " ");
        }
        System.out.println();
    }
}
