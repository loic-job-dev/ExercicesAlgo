float[] notes = {0, 13.5, 8.5, 13.7, 20, 12, 8.5, 17, 11, 10, 9.5, 4, 14, 13.5, 12, 1, 15, 10.5, 7.5, 9.5};
int[] oneHeight = new int [10];
int histogramHeight=0; 

void setup() {
  histogrammeHorizontal();
  println();
  getHeight(notes);
  println();
  maxHeight (oneHeight);
  histogrammeVertical (oneHeight);
}

// Fonctions pour le tri horizontal
void triHorizontal (float min, float max, float[]notes) {
   for (int i=0; i<notes.length; i++) {
     if (notes[i] >= min && notes[i] <= max) {
       print("*  \t");
     }
   }
   println();
}

void histogrammeHorizontal () {
  print("[  0.0 ;  2.0 ] : " );
  triHorizontal(0, 2, notes);
  for (float i=2; i<8; i=i+2) {
    print("]  "+i+" ;  "+(i+2)+" ] : " );
    triHorizontal((i+0.1), i+2, notes);
  }
  print("]  8.0 ; 10.0 ] : " );
  triHorizontal(8.1, 10, notes);
  for (float i=10; i<20; i=i+2) {
    print("] "+i+" ; "+(i+2)+" ] : " );
    triHorizontal((i+0.1), i+2, notes);
  }
}

//Fonctions pour le tri vertical

// Pour avoir le nombre de notes dans chaque tranche de notes de 2 en 2
void getHeight (float[]notes) {
  for (int j=0; j<10; j++) { 
    histogramHeight=0;
    for (int i=0; i<notes.length; i++) {
      if (notes[i] > (j*2) && notes[i] <= (j*2)+2) {
        histogramHeight++;
       if (j==0) {
          histogramHeight = 2;
       }
        oneHeight[j]=histogramHeight;
      }
    }
  }
}

// Pour obtenir le plus grand nombre de la liste = avoir la hauteur max de l'histogramme
int maxHeight (int[] oneHeight){
  int maximum = 0;
  for (int i=0; i<oneHeight.length; i++) {
    if (maximum<oneHeight[i]) {
      maximum = oneHeight[i];
    }
  }
  return maximum;
}

void histogrammeVertical (int[] oneHeight) {
  int maximum = maxHeight (oneHeight);
  for (int j=0; j<maxHeight (oneHeight); j++){
    print("\t");
    for (int i = 0; i<10; i++) {
      if (oneHeight[i] >= maximum) {
        print("*   \t");
      }
      if (oneHeight[i] < maximum) {
        print("   \t");
      }
    }
    println();
    maximum-- ;
  }
  println("-------------------------------------------------------------------------------------------------------------------");
  println("       [ 0 ; 2]  ] 2 ; 4]  ] 4 ; 6]  ] 6 ; 8]  ] 8 ;10]   ]10 ;12]  ]12 ;14]  ]14 ;16]  ]16 ;18]  ]18 ;20]");
}
