/* 4.4 Démineur en ligne - Parcours */
int[] boardMine ;


void setup () {
  int N = 9;
  initBoard(N, 3);
  for (int i=0; i<boardMine.length; i++) {
    println(boardMine[i]);  /*Permet de vérifier la création de tableau*/
  }
}

void initBoard (int sizeBoard, int mineNumber) {
  boardMine = new int [sizeBoard];
  /* Dépose une mine */
  boardMine[int(random(sizeBoard-1))] = 99; 
  for (int i=0; i<mineNumber-1; i++) {
    int mineIndex = int(random(sizeBoard-1));
    /* Si la case est déjà minée, on reboucle */
    if (boardMine[mineIndex] == 99) {   
      println("itération n° " + i + "-> mineNumber : " + mineNumber);
      mineNumber++;
    }
    /* Sinon, on pose une mine) */
    else {  
      boardMine[mineIndex] = 99;
    }
  }
}


void isAMine (int mineIndex) {
  if (boardMine[mineIndex] == 99) {
    println("La case " + mineIndex + "contient une mine"); 
  }
  else {
    println("La case " + mineIndex + "ne contient pas de mine"); 
  }
}

int getMines (int mineIndex) {
  int nearMines = 0;
  if (boardMine[mineIndex-1] == 99 && boardMine[mineIndex+1] == 99) {
    nearMines = nearMines+2;
  }
  else if (boardMine[mineIndex-1] == 99 || boardMine[mineIndex+1] == 99) {
    nearMines++;
  }
  return nearMines;
}
