/* 4.4 Démineur en ligne - Parcours */
int[] boardMine ;


void setup () {
  int N = 9;
  initBoard(N, 3);
  for (int i=0; i<boardMine.length; i++) {
    if (isAMine(i)) {
      println("X");
    }
    else {
      println(getMines(i));
    }
  }
  println(boardMine);  /*Permet de vérifier la création de tableau*/
}

void initBoard (int sizeBoard, int mineNumber) {
  boardMine = new int [sizeBoard];
  /* Dépose une mine */
  boardMine[int(random(sizeBoard-1))] = 99; 
  for (int i=0; i<mineNumber-1; i++) {
    int mineIndex = int(random(sizeBoard-1));
    /* Si la case est déjà minée, on reboucle */
    if (boardMine[mineIndex] == 99) {   
      mineNumber++;
    }
    /* Sinon, on pose une mine) */
    else {  
      boardMine[mineIndex] = 99;
    }
  }
}


boolean isAMine (int mineIndex) {
  if (boardMine[mineIndex] == 99) {
    return true;
  }
  else {
    return false;
  }
}

int getMines (int mineIndex) {
  int nearMines = 0;
    if(mineIndex > 0 && boardMine[mineIndex-1] == 99) {
      nearMines++;
    }
    if(mineIndex < boardMine.length-1 && boardMine[mineIndex+1] == 99) {
      nearMines++;
    }
  return nearMines;
}
